 AWSTemplateFormatVersion: 2010-09-09
 Description: Continuous Integration and Continuous Delivery.
#  Outputs:
#    LogGroup:
#      Value:
#        Fn::Sub: /aws/lambda/${SeederFunction}
 Conditions:
   CreateCodeBuildResources: !Equals
   - true
   - true
   CreateWebSiteS3Bucket: !Equals
   - true
   - false
 Metadata:
   AWS::CloudFormation::Interface:
     ParameterGroups:
     - Label:
         default: Application
       Parameters:
       - ProjectId
   CodeBuildImage: aws/codebuild/java:openjdk-8
   CodeBuildImageOverride: aws/codebuild/java:openjdk-8
   CreateCodeBuild: true
   Platform: java
   ProjectTemplateId: webapp-javaspring-eb
   WebsiteS3Bucket: AWS::NoValue
 Parameters:
   AppName:
     Description: Name of the application.
     MaxLength: 100
     MinLength: 1
     Type: String
   ProjectId:
     AllowedPattern: ^[a-z]([a-z0-9-])+$
     ConstraintDescription: Project IDs must be between 2 and 15 characters, begin with a letter, and only contain lowercase letters, numbers, and hyphens (-).
     Description: Project ID.
     MaxLength: 15
     MinLength: 2
     Type: String
   RepositoryName:
     Description: AWS CodeCommit repository name.
     MaxLength: 100
     MinLength: 1
     Type: String

   seedURL:
     Description: Enter the URL to source for seeding.
     Type: String

   targetRepositoryName:
     Description: Enter the CodeCommit repository name to target for seeding.
     Type: String

   targetRepositoryRegion:
     Description: Enter the CodeCommit repository region to target for seeding.
     Type: String
     Default: us-east-1  
 Resources:
   CloudFormationTrustRole:
     Description: Creating service role in IAM for AWS CloudFormation
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - cloudformation.amazonaws.com
       Path: /
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - dynamodb:CreateTable
             - dynamodb:DeleteTable
             - dynamodb:DescribeTable
             - kinesis:CreateStream
             - kinesis:DeleteStream
             - kinesis:DescribeStream
             - sns:CreateTopic
             - sns:DeleteTopic
             - sns:ListTopics
             - sns:GetTopicAttributes
             - sns:SetTopicAttributes
             - s3:CreateBucket
             - s3:DeleteBucket
             - ec2:*
             - autoscaling:*
             - elasticloadbalancing:*
             - elasticbeanstalk:*
             Effect: Allow
             Resource:
             - '*'
           - Action:
             - s3:PutObject
             - s3:GetObject
             - s3:GetObjectVersion
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:s3:::${S3Bucket}'
             - !Sub 'arn:aws:s3:::${S3Bucket}/*'
           - Action:
             - cloudformation:CreateChangeSet
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'
           - Action:
             - s3:*
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:s3:::${S3Bucket}'
             - !Sub 'arn:aws:s3:::${S3Bucket}/*'
             - arn:aws:s3:::elasticbeanstalk*
           - Action:
             - cloudformation:CreateStack
             - cloudformation:DeleteStack
             - cloudformation:GetTemplate
             - cloudformation:ListStackResources
             - cloudformation:UpdateStack
             - cloudformation:DescribeStack*
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/awseb-e-*'
           - Action:
             - iam:PassRole
             Effect: Allow
             Resource:
             - !GetAtt 'EBTrustRole.Arn'
             - !GetAtt 'EBWorkerRole.Arn'
         PolicyName: WorkerCloudFormationRolePolicy
       RoleName: !Sub 'Worker-${ProjectId}-CloudFormation'
     Type: AWS::IAM::Role
   CodeBuildPolicy:
     Condition: CreateCodeBuildResources
     Description: Setting IAM policy for service role for Amazon EC2 instances
     Properties:
       PolicyDocument:
         Statement:
         - Action:
           - cloudformation:describe*
           Effect: Allow
           Resource: '*'
         - Action:
           - logs:CreateLogGroup
           - logs:CreateLogStream
           - logs:PutLogEvents
           Effect: Allow
           Resource: '*'
         - Action:
           - s3:PutObject
           - s3:GetObject
           - s3:GetObjectVersion
           Effect: Allow
           Resource:
           - !Join
             - ''
             - - 'arn:aws:s3:::'
               - !Ref 'S3Bucket'
           - !Join
             - ''
             - - 'arn:aws:s3:::'
               - !Ref 'S3Bucket'
               - /*
         - !If
           - CreateWebSiteS3Bucket
           - Action:
             - s3:PutObject*
             - s3:GetObject
             - s3:GetObjectVersion
             Effect: Allow
             Resource:
             - !Join
               - ''
               - - 'arn:aws:s3:::'
                 - !Ref 'AWS::NoValue'
             - !Join
               - ''
               - - 'arn:aws:s3:::'
                 - !Ref 'AWS::NoValue'
                 - /*
           - !Ref 'AWS::NoValue'
         - Action:
           - codecommit:GitPull
           Effect: Allow
           Resource:
           - !Join
             - ':'
             - - arn
               - aws
               - codecommit
               - !Ref 'AWS::Region'
               - !Ref 'AWS::AccountId'
               - !Ref 'RepositoryName'
         - Action:
           - kms:GenerateDataKey*
           - kms:Encrypt
           - kms:Decrypt
           Effect: Allow
           Resource:
           - !Join
             - ':'
             - - arn:aws:kms
               - !Ref 'AWS::Region'
               - !Ref 'AWS::AccountId'
               - !Join
                 - /
                 - - alias
                   - aws/s3
       PolicyName: WorkerCodeBuildPolicy
       Roles:
       - !Ref 'CodeBuildRole'
     Type: AWS::IAM::Policy
   CodeBuildProject:
     Condition: CreateCodeBuildResources
     DependsOn:
     - CodeBuildPolicy
     Properties:
       Artifacts:
         Packaging: zip
         Type: codepipeline
       Description: !Join
       - ''
       - - 'AWS created CodeBuild Project for '
         - !Ref 'AppName'
       Environment:
         ComputeType: small
         EnvironmentVariables:
         - Name: S3_BUCKET
           Value: !Ref 'S3Bucket'
         - Name: WEBSITE_S3_PREFIX
           Value: !If
           - CreateWebSiteS3Bucket
           - !Join
             - ''
             - - https://s3.amazonaws.com/
               - !Ref 'AWS::NoValue'
           - NoVal
         - Name: WEBSITE_S3_BUCKET
           Value: !If
           - CreateWebSiteS3Bucket
           - !Ref 'AWS::NoValue'
           - NoVal
         Image: aws/codebuild/java:openjdk-8
         Type: container
       Name: !Ref 'ProjectId'
       ServiceRole: !Ref 'CodeBuildRole'
       Source:
         Type: codepipeline
     Type: AWS::CodeBuild::Project
   CodeBuildRole:
     Condition: CreateCodeBuildResources
     Description: Creating service role in IAM for Amazon EC2 instances
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action: sts:AssumeRole
           Effect: Allow
           Principal:
             Service: codebuild.amazonaws.com
       Path: /
       RoleName: !Join
       - '-'
       - - Worker
         - !Ref 'ProjectId'
         - CodeBuild
     Type: AWS::IAM::Role
   CodeCommitRepo:
     Description: Creating AWS CodeCommit repository for application source code
     Properties:
       RepositoryDescription: !Join
       - ''
       - - !Ref 'ProjectId'
         - ' project repository'
       RepositoryName: !Ref 'RepositoryName'
     Type: AWS::CodeCommit::Repository
   CodePipelineTrustRole:
     Description: Creating service role in IAM for AWS CodePipeline
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action: sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - codepipeline.amazonaws.com
           Sid: 1
       Path: /
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - s3:*
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:s3:::${S3Bucket}'
             - !Sub 'arn:aws:s3:::${S3Bucket}/*'
             - arn:aws:s3:::elasticbeanstalk*
           - Action:
             - s3:CreateBucket
             Effect: Allow
             Resource: '*'
           - Action:
             - codecommit:CancelUploadArchive
             - codecommit:GetBranch
             - codecommit:GetCommit
             - codecommit:GetUploadArchiveStatus
             - codecommit:UploadArchive
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}'
           - !If
             - CreateCodeBuildResources
             - Action:
               - codebuild:StartBuild
               - codebuild:BatchGetBuilds
               - codebuild:StopBuild
               Effect: Allow
               Resource:
               - !GetAtt 'CodeBuildProject.Arn'
             - !Ref 'AWS::NoValue'
           - Action:
             - elasticbeanstalk:*
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:elasticbeanstalk:${AWS::Region}:${AWS::AccountId}:application/${ProjectId}'
             - !Sub 'arn:aws:elasticbeanstalk:${AWS::Region}:${AWS::AccountId}:applicationversion/${ProjectId}/*'
             - !Sub 'arn:aws:elasticbeanstalk:${AWS::Region}:${AWS::AccountId}:environment/${ProjectId}'
           - Action:
             - elasticbeanstalk:*
             - elasticloadbalancing:*
             - logs:*
             Effect: Allow
             Resource: '*'
           - Action:
             - autoscaling:DescribeAutoScalingGroups
             - autoscaling:DescribeLaunchConfigurations
             - autoscaling:DescribeScalingActivities
             - autoscaling:ResumeProcesses
             - autoscaling:SuspendProcesses
             - ec2:Describe*
             Effect: Allow
             Resource: '*'
           - Action:
             - cloudformation:GetTemplate
             - cloudformation:ListStackResources
             - cloudformation:UpdateStack
             - cloudformation:DescribeStack*
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/awseb-e-*'
           - Action:
             - cloudformation:DescribeStacks
             - cloudformation:DescribeChangeSet
             - cloudformation:CreateChangeSet
             - cloudformation:DeleteChangeSet
             - cloudformation:ExecuteChangeSet
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectId}-infrastructure/*'
           - Action:
             - iam:PassRole
             Effect: Allow
             Resource:
             - !GetAtt 'CloudFormationTrustRole.Arn'
         PolicyName: WorkerCodePipelinePolicy
       RoleName: !Sub 'Worker-${ProjectId}-CodePipeline'
     Type: AWS::IAM::Role
   EBInstanceProfile:
     Description: Creating Amazon EC2 instance profile for AWS Elastic Beanstalk
     Properties:
       Path: /
       Roles:
       - !Ref 'EBWorkerRole'
     Type: AWS::IAM::InstanceProfile
   EBTrustRole:
     Description: Creating service role in IAM for AWS Elastic Beanstalk
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - elasticbeanstalk.amazonaws.com
         Version: 2012-10-17
       ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
       - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService
       Path: /
       RoleName: !Sub 'Worker-${ProjectId}-EBService'
     Type: AWS::IAM::Role
   EBWorkerRole:
     Description: Creating instance profile role in IAM for AWS Elastic Beanstalk
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - ec2.amazonaws.com
         Version: 2012-10-17
       Path: /
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - s3:GetObject
             Effect: Allow
             Resource:
             - !Sub 'arn:aws:s3:::aws-${AWS::Region}-${AWS::AccountId}/${ProjectId}/ssh/*'
             - !Sub 'arn:aws:s3:::remote-access-signatures-${AWS::Region}/*'
             - !Sub 'arn:aws:s3:::remote-access-${AWS::Region}/*'
           Version: 2012-10-17
         PolicyName: EBInstancePolicy
       RoleName: !Sub 'Worker-${ProjectId}-EB'
     Type: AWS::IAM::Role
   ProjectPipeline:
     DependsOn:
     - SeedRepo
     - CodePipelineTrustRole
     Description: Creating a deployment pipeline for your project in AWS CodePipeline
     Properties:
       ArtifactStore:
         Location: !Ref 'S3Bucket'
         Type: S3
       Name: !Sub '${ProjectId}-Pipeline'
       RoleArn: !GetAtt 'CodePipelineTrustRole.Arn'
       Stages:
       - Actions:
         - ActionTypeId:
             Category: Source
             Owner: AWS
             Provider: CodeCommit
             Version: 1
           Configuration:
             BranchName: master
             PollForSourceChanges: false
             RepositoryName: !Ref 'RepositoryName'
           InputArtifacts: [
             ]
           Name: ApplicationSource
           OutputArtifacts:
           - Name: !Sub '${ProjectId}-SourceArtifact'
           RunOrder: 1
         Name: Source
       - !If
         - CreateCodeBuildResources
         - Actions:
           - ActionTypeId:
               Category: Build
               Owner: AWS
               Provider: CodeBuild
               Version: 1
             Configuration:
               ProjectName: !Ref 'ProjectId'
             InputArtifacts:
             - Name: !Sub '${ProjectId}-SourceArtifact'
             Name: CodeBuild
             OutputArtifacts:
             - Name: !Sub '${ProjectId}-BuildArtifact'
             RunOrder: 1
           Name: Build
         - !Ref 'AWS::NoValue'
       - Actions:
         - ActionTypeId:
             Category: Deploy
             Owner: AWS
             Provider: ElasticBeanstalk
             Version: 1
           Configuration:
             ApplicationName: !Sub '${ProjectId}'
             EnvironmentName: !Sub '${ProjectId}'
           InputArtifacts:
           - Name: !Sub '${ProjectId}-BuildArtifact'
           Name: ExecuteChangeSet
           OutputArtifacts: [
             ]
           RunOrder: 2
         Name: Deploy
     Type: AWS::CodePipeline::Pipeline
   S3ArtifactBucketPolicy:
     Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
     Properties:
       Bucket: !Ref 'S3Bucket'
       PolicyDocument:
         Id: SSEAndSSLPolicy
         Statement:
         - Action: s3:PutObject
           Condition:
             Bool:
               aws:SecureTransport: false
             StringNotEquals:
               s3:x-amz-server-side-encryption: aws:kms
           Effect: Deny
           Principal: '*'
           Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
           Sid: DenyUnEncryptedObjectUploads
         - Action:
           - s3:GetObject
           - s3:GetObjectVersion
           - s3:GetBucketVersioning
           - s3:PutObject
           Condition:
             Bool:
               aws:SecureTransport: true
           Effect: Allow
           Principal:
             AWS:
             - !GetAtt 'CodePipelineTrustRole.Arn'
             - !If
               - CreateCodeBuildResources
               - !GetAtt 'CodeBuildRole.Arn'
               - !Ref 'AWS::NoValue'
           Resource:
           - !Sub 'arn:aws:s3:::${S3Bucket}/*'
           - !Sub 'arn:aws:s3:::${S3Bucket}'
           Sid: OnlyCodeApplications
         Version: 2012-10-17
     Type: AWS::S3::BucketPolicy
   S3Bucket:
     DeletionPolicy: Retain
     Description: Creating Amazon S3 bucket for AWS CodePipeline artifacts
     Properties:
       BucketName: !Join
       - '-'
       - - aws
         - !Ref 'AWS::Region'
         - !Ref 'AWS::AccountId'
         - !Ref 'ProjectId'
         - pipe
       Tags:
       - Key: Name
         Value: !Join
         - '-'
         - - !Ref 'ProjectId'
           - S3Bucket
     Type: AWS::S3::Bucket
   SeedRepo:
     Properties:
       ServiceToken:
         Fn::GetAtt:
         - SeederFunction
         - Arn
       sourceUrl:
         Ref: seedURL
       targetRepositoryName:
         Ref: targetRepositoryName
       targetRepositoryRegion:
         Ref: targetRepositoryRegion
     Type: Custom::SeedRepo
   SeederFunction:
     Properties:
       Code:
         S3Bucket: bryanlabs-public
         S3Key: aws-serverless-codecommit-seeder.zip
       Description: CodeCommit Repository Seeder
       Handler: seeder.SeedRepositoryHandler
       MemorySize: 1028
       Role:
         Fn::GetAtt:
         - SeederRole
         - Arn
       Runtime: java8
       Timeout: 300
     Type: AWS::Lambda::Function
   SeederRole:
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - codecommit:GetRepository
             - codecommit:GitPush
             Effect: Allow
             Resource:
               Fn::Sub: arn:aws:codecommit:${targetRepositoryRegion}:${AWS::AccountId}:${targetRepositoryName}
           Version: '2012-10-17'
         PolicyName: SeederRolePolicy
     Type: AWS::IAM::Role
   SourceEvent:
     Properties:
       Description: Rule for Amazon CloudWatch Events to detect changes to the source repository and trigger pipeline execution
       EventPattern:
         detail:
           event:
           - referenceCreated
           - referenceUpdated
           referenceName:
           - master
           referenceType:
           - branch
         detail-type:
         - CodeCommit Repository State Change
         resources:
         - !GetAtt 'CodeCommitRepo.Arn'
         source:
         - aws.codecommit
       Name: !Join
       - '-'
       - - !Ref 'ProjectId'
         - SourceEvent
       State: ENABLED
       Targets:
       - Arn: !Join
         - ':'
         - - arn
           - aws
           - codepipeline
           - !Ref 'AWS::Region'
           - !Ref 'AWS::AccountId'
           - !Join
             - '-'
             - - !Ref 'ProjectId'
               - Pipeline
         Id: ProjectPipelineTarget
         RoleArn: !GetAtt 'SourceEventRole.Arn'
     Type: AWS::Events::Rule
   SourceEventRole:
     Description: IAM role to allow Amazon CloudWatch Events to trigger AWS CodePipeline execution
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action: sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - events.amazonaws.com
           Sid: 1
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - codepipeline:StartPipelineExecution
             Effect: Allow
             Resource:
             - !Join
               - ':'
               - - arn
                 - aws
                 - codepipeline
                 - !Ref 'AWS::Region'
                 - !Ref 'AWS::AccountId'
                 - !Join
                   - '-'
                   - - !Ref 'ProjectId'
                     - Pipeline
         PolicyName: WorkerCloudWatchEventPolicy
       RoleName: !Join
       - '-'
       - - Worker
         - !Ref 'ProjectId'
         - CloudWatchEventRule
     Type: AWS::IAM::Role
 Outputs:

  Name:
    Description: CICD Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  SSHCloneURL:
    Description: SSH Clone URL for application.
    Value: !Join [ '', [ "ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/", !Ref 'RepositoryName' ] ]
    Export:
      Name: !Sub ${AWS::StackName}-SSHCloneURL    